name: Fish Shell Syntax & Functionality Check

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  fish-syntax:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        fish-version: [3.6, 3.5, 3.4, 3.3]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Fish shell
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y fish

    - name: Install Fish shell (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install fish

    - name: Verify Fish version
      run: |
        fish --version
        echo "Fish version: ${{ matrix.fish-version }}"

    - name: Check Fish syntax
      run: |
        # Check syntax for all .fish files
        for file in *.fish; do
          if [ -f "$file" ]; then
            echo "Checking syntax for $file..."
            fish -c "source $file" || {
              echo "‚ùå Syntax error in $file"
              exit 1
            }
            echo "‚úÖ $file syntax OK"
          fi
        done

    - name: Test function loading
      run: |
        # Test that functions can be loaded without errors
        fish -c "
          # Test nvm function definition
          functions -t nvm
          echo '‚úÖ nvm function loaded successfully'

          # Test helper functions
          if functions -q __nvm_handle_nvmrc_file
            echo '‚úÖ Helper functions available'
          end
        " || {
          echo "‚ùå Function loading test failed"
          exit 1
        }

    - name: Validate PKGBUILD
      if: matrix.os == 'ubuntu-latest'
      run: |
        # Check if PKGBUILD is valid bash
        bash -n PKGBUILD
        echo "‚úÖ PKGBUILD syntax OK"

    - name: Check file permissions
      run: |
        # Ensure fish files are executable
        chmod +x *.fish 2>/dev/null || true
        echo "‚úÖ File permissions set"

    - name: Run CI test script
      run: |
        # Run our comprehensive test suite
        fish test_ci.fish
        echo "‚úÖ CI tests passed"

  code-quality:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check for common issues
      run: |
        echo "üîç Checking code quality..."

        # Check for deprecated syntax
        if grep -q "test.*-a.*" *.fish; then
          echo "‚ùå Found deprecated '-a' operator in test commands"
          exit 1
        fi
        echo "‚úÖ No deprecated syntax found"

        # Check for proper error handling
        if grep -q "echo.*error" *.fish | grep -v ">"; then
          echo "‚ö†Ô∏è  Consider redirecting error messages to stderr"
        fi
        echo "‚úÖ Error handling check completed"

        # Check file sizes
        for file in *.fish; do
          if [ -f "$file" ]; then
            lines=$(wc -l < "$file")
            if [ "$lines" -gt 500 ]; then
              echo "‚ö†Ô∏è  $file is large ($lines lines), consider refactoring"
            fi
          fi
        done
        echo "‚úÖ File size check completed"

  security-scan:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Security check
      run: |
        echo "üîí Running security checks..."

        # Check for potential security issues
        if grep -q "rm -rf" *.fish *.sh 2>/dev/null; then
          echo "‚ö†Ô∏è  Found 'rm -rf' usage - review for security"
        fi

        # Check for eval usage
        if grep -q "eval" *.fish *.sh 2>/dev/null; then
          echo "‚ö†Ô∏è  Found 'eval' usage - review for security"
        fi

        # Check for hardcoded paths
        if grep -q "/home/" *.fish *.sh 2>/dev/null | grep -v "#"; then
          echo "‚ö†Ô∏è  Found hardcoded paths - consider using variables"
        fi

        echo "‚úÖ Security scan completed"